@page "/residence-pictures/{Id:int}"
@using FribergBlazorApp.DTOs
@inject HttpClient Http
@inject NavigationManager Navigation

@if (!showForm && !showConfirmation)
{
    <h3>Bilder</h3>

    <div style="position: absolute; right: 50px;">
    </div>

    <div>
        <button @onclick="() => ShowForm(PictureAction.Create)">Skapa en ny bild</button>
    </div>

    @if (pictures == null)
    {
        <p><em>Laddar...</em></p>
    }
    else if (errorString != null)
    {
        <p>An error occurred: @errorString</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Bild</th>
                    <th>Val</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var picture in FilteredItems())
                {
                    
                    <tr>
                        <td><img src="@picture.Picture" alt="Picture" style="max-width: 200px; max-height: 200px;" /></td>
                        <td>
                            <button @onclick="() => ShowForm(PictureAction.Edit, picture)">Ändra</button>
                            <button @onclick="() => ShowConfirmationDialog(picture.Id)">Radera</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@if (showForm)
{
    @if (pictureAction == PictureAction.Create || pictureAction == PictureAction.Edit)
    {
        <div>
            <h3>@(pictureAction == PictureAction.Create ? "Skapa en ny bild" : "Redigera bild")</h3>
            <input type="text" @bind="picture.Picture" />
            <button @onclick="SavePicture">@(pictureAction == PictureAction.Create ? "Skapa" : "Spara")</button>
            <button @onclick="Cancel">Avbryt</button>
        </div>      
    }
}

@if (showConfirmation)
{
    <div>
        <h3>Radera bild</h3>
        <p>Är du säker på att du vill radera denna bild?</p>
        <button @onclick="() => DeletePicture(selectedPictureId)">Ja, Radera</button>
        <button @onclick="Cancel">Avbryt</button>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private string baseUrl = "https://localhost:7280/api/residencepictures";
    private List<PictureDto>? pictures;
    private string? errorString;
    private string? searchTerm;
    private PictureAction pictureAction = PictureAction.None;
    private PictureDto picture = new PictureDto();
    private bool showForm = false;
    private bool showConfirmation = false;
    private int selectedPictureId;

    private enum PictureAction
    {
        None,
        Create,
        Edit
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadPictures();
    }

    private async Task LoadPictures()
    {
        try
        {
            pictures = await Http.GetFromJsonAsync<List<PictureDto>>($"{baseUrl}/pictures-by-residence/{Id}");
        }
        catch (Exception ex)
        {
            errorString = $"Felmeddelande: {ex.Message}";
        }
    }

    private IEnumerable<PictureDto> FilteredItems()
    {
        var filteredList = pictures.Where(x => x.ResidenceId == Id);
        return filteredList.ToList();
    }

    private void ShowForm(PictureAction action, PictureDto picture = null)
    {
        if (pictures.Count < 40)
        {
            pictureAction = action;
            if (picture != null)
            {
                this.picture = picture;
            }
            showForm = true;
        }
        else errorString = $"Du kan inte lägga till fler än {pictures.Count} bilder på ett hus.";
    }

    private void ShowConfirmationDialog(int pictureId)
    {
        selectedPictureId = pictureId;
        showConfirmation = true;
    }

    private async Task SavePicture()
    {
        if (pictureAction == PictureAction.Create)
        {
            await CreatePicture();
        }
        else if (pictureAction == PictureAction.Edit)
        {
            await UpdatePicture();
        }
        else
        {
            ResetState();
        }
        ResetState();
        ShowRead();
    }

    private async Task CreatePicture()
    {
        try
        {
            picture.ResidenceId = Id;
            HttpResponseMessage response = await Http.PostAsJsonAsync(baseUrl, picture);
            response.EnsureSuccessStatusCode();
            pictures.Add(await response.Content.ReadFromJsonAsync<PictureDto>());
        }
        catch (Exception ex)
        {
            errorString = $"Bilden kunde inte skapas: Är du säker på att bostaden existerar?";
        }
    }

    private async Task UpdatePicture()
    {
        try
        {
            HttpResponseMessage response = await Http.PutAsJsonAsync($"{baseUrl}/{picture.Id}", picture);
            response.EnsureSuccessStatusCode();
            var index = pictures.FindIndex(p => p.Id == picture.Id);
            pictures[index] = picture;
        }
        catch (Exception ex)
        {
            errorString = $"Bilden kunde inte redigeras";
        }
    }

    private async Task DeletePicture(int pictureId)
    {
        try
        {
            HttpResponseMessage response = await Http.DeleteAsync($"{baseUrl}/{pictureId}");
            response.EnsureSuccessStatusCode();
            pictures.RemoveAll(p => p.Id == pictureId);
        }
        catch (Exception ex)
        {
            errorString = $"Bilden kunde inte raderas";
        }
        showConfirmation = false;
        ShowRead();
    }

    private void Cancel()
    {
        ResetState();
    }

    private void ResetState()
    {
        picture = new PictureDto();
        pictureAction = PictureAction.None;
        showForm = false;
        showConfirmation = false;
        selectedPictureId = 0;
    }

    private void ShowRead()
    {
        ResetState();
    }
}