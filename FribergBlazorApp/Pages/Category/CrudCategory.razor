@*author: Christian Alp*@

@page "/categories"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HomeRedirect HomeRedirect

<AuthorizeView Roles="SuperRealtor">
    <Authorized>
        @if (!showForm && !showConfirmation)
        {
            <h3>Kategorier</h3>

            <div style="position: absolute; right: 50px;">
                <input type="text" @bind:event="oninput" @bind="searchTerm" placeholder="Sök..." />
            </div>

            <div>
                <button class="btn btn-primary" @onclick="() => ShowForm(CategoryAction.Create)">Skapa en ny kategori</button>
            </div>

            @if (categories == null)
            {
                <p><em>Laddar...</em></p>
            }
            else if (errorString != null)
            {
                <p>Ett problem uppstod: @errorString</p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Namn</th>
                            <th>Val</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in FilteredItems)
                        {
                            <tr>
                                <td>@category.Id</td>
                                <td>@category.Name</td>
                                <td>
                                    <button class="btn btn-outline-primary" @onclick="() => ShowForm(CategoryAction.Edit, category)">Ändra</button>
                                    <button class="btn btn-danger" @onclick="() => ShowConfirmationDialog(category.Id)">Radera </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }

        @if (showForm)
        {
            @if (categoryAction == CategoryAction.Create || categoryAction == CategoryAction.Edit)
            {
                <div>
                    <h3>@(categoryAction == CategoryAction.Create ? "Skapa en ny kategori" : "Redigera kategori")</h3>
                    <input type="text" @bind="category.Name" />
                    <button class="btn btn-primary" @onclick="SaveCategory">@(categoryAction == CategoryAction.Create ? "Skapa" : "Spara")</button>
                    <button class="btn btn-outline-primary" @onclick="Cancel">Avbryt</button>
                </div>
            }
        }

        @if (showConfirmation)
        {
            <div>
                <h3>Radera kategori</h3>
                <p>Är du säker på att du vill radera denna kategori?</p>
                <button class="btn btn-danger" @onclick="() => DeleteCategory(selectedCategoryId)">Ja, Radera</button>
                <button class="btn btn-outline" @onclick="Cancel">Avbryt</button>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {

    private string baseUrl = "https://localhost:7280/api/category";
    private List<CategoryDto>? categories;
    private string? errorString;
    private string? searchTerm;
    private CategoryAction categoryAction = CategoryAction.None;
    private CategoryDto category = new CategoryDto();
    private bool showForm = false;
    private bool showConfirmation = false;
    private int selectedCategoryId;

    private enum CategoryAction
    {
        None,
        Create,
        Edit
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        HomeRedirect.CheckIfSuperRealtor(authState.User);
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await Http.GetFromJsonAsync<List<CategoryDto>>(baseUrl);
        }
        catch (Exception ex)
        {
            errorString = $"Felmeddelande: {ex.Message}";
        }
    }

    private IEnumerable<CategoryDto> FilteredItems
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchTerm))
            {
                return categories ?? Enumerable.Empty<CategoryDto>();
            }
            return categories?.Where(c => c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || c.Id.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ?? Enumerable.Empty<CategoryDto>();
        }
    }

    private void ShowForm(CategoryAction action, CategoryDto category = null)
    {
        categoryAction = action;
        if (category != null)
        {
            this.category = category;
        }
        showForm = true;
    }

    private void ShowConfirmationDialog(int categoryId)
    {
        selectedCategoryId = categoryId;
        showConfirmation = true;
    }

    private async Task SaveCategory()
    {
        if (categoryAction == CategoryAction.Create)
        {
            await CreateCategory();
        }
        else if (categoryAction == CategoryAction.Edit)
        {
            await UpdateCategory();
        }
        ResetState();
    }

    private async Task CreateCategory()
    {
        try
        {
            HttpResponseMessage response = await Http.PostAsJsonAsync(baseUrl, category);
            response.EnsureSuccessStatusCode();
            categories.Add(await response.Content.ReadFromJsonAsync<CategoryDto>());
        }
        catch (Exception ex)
        {
            errorString = $"Fel: {ex.Message}";
        }
    }

    private async Task UpdateCategory()
    {
        try
        {
            HttpResponseMessage response = await Http.PutAsJsonAsync($"{baseUrl}/{category.Id}", category);
            response.EnsureSuccessStatusCode();
            var index = categories.FindIndex(c => c.Id == category.Id);
            categories[index] = category;
        }
        catch (Exception ex)
        {
            errorString = $"Fel: {ex.Message}";
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        try
        {
            HttpResponseMessage response = await Http.DeleteAsync($"{baseUrl}/{categoryId}");
            response.EnsureSuccessStatusCode();
            categories.RemoveAll(c => c.Id == categoryId);
        }
        catch (Exception ex)
        {
            errorString = $"Fel: {ex.Message}";
        }
        showConfirmation = false;
    }

    private void Cancel()
    {
        ResetState();
    }

    private void ResetState()
    {
        category = new CategoryDto();
        categoryAction = CategoryAction.None;
        showForm = false;
        showConfirmation = false;
        selectedCategoryId = 0;
    }
}
