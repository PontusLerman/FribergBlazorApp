@* author: Johan Krångh *@
@page "/remove-municipality/{id:int}"
@inject HttpClient Http
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HomeRedirect HomeRedirect

<AuthorizeView Roles="SuperRealtor">
    <Authorized>
        <h3>Ta Bort @(Municipality.MunicipalityName)?</h3>


        <button class="btn btn-danger" @onclick="@(() => RemoveMunicipality(Id))">Ta Bort</button>
        <a class="btn btn-outline-primary" href="municipalities">Tillbaka</a>


        <p>@errorString</p>
    </Authorized>
</AuthorizeView>
@code {
    [Parameter]
    public int? Id { get; set; }
    public MunicipalityDto Municipality { get; set; } = new MunicipalityDto();
    private string? errorString;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        HomeRedirect.CheckIfSuperRealtor(authState.User);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id != null)
        {
            var result = await Http.GetFromJsonAsync<MunicipalityDto>($"api/municipalities/{Id}");
            if (result != null)
            {
                Municipality = result;
            }
        }
    }

    async Task RemoveMunicipality(int? id)
    {
        var response = await Http.DeleteAsync($"api/municipalities/{id}");
        if (response.IsSuccessStatusCode)
        {
            NavManager.NavigateTo("municipalities");
        }
        else
        {
            errorString = "Du kan inte ta bort en kommun som används.";
        }
    }
}
