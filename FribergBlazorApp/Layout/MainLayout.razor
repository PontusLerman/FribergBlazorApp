@* author: Christian Alp, Johan Krångh, Pontus Lerman *@
@using Blazored.LocalStorage
@using FribergBlazorApp.Services
@using System.Security.Claims
@inherits LayoutComponentBase
@inject AuthService authService
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject ILocalStorageService localStorage

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <button class="btn btn-outline-primary" alt="Ändra dina uppgifter" onclick=@(() => navigationManager.NavigateTo($"/edit-realtor/{Realtor.Id}"))>@Realtor.FirstName @Realtor.LastName</button>
                    <button class="btn btn-outline-danger"  @onclick="HandleLogout">Logga ut</button>
                </Authorized>
                <NotAuthorized>
                    <button class="btn btn-primary" @onclick="GoToRegister">Registrera</button>
                    <button class="btn btn-primary" @onclick="GoToLogin">Logga in</button>
                </NotAuthorized>
            </AuthorizeView>          
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool isAuthenticated;
    private AuthResponseDto currentUser = new AuthResponseDto();
    private RealtorDto Realtor = new RealtorDto();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentUser = await localStorage.GetItemAsync<AuthResponseDto>("currentUser");
            Realtor = await Http.GetFromJsonAsync<RealtorDto>($"api/realtor/{currentUser.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching current user: {ex.Message}");
        }

        CheckAuthentication();
    }

    private async Task CheckAuthentication()
    {
        isAuthenticated = await authService.IsAuthenticated();
        StateHasChanged(); 
    }

    private void GoToLogin()
    {
        navigationManager.NavigateTo("/login");
    }
    private void GoToRegister()
    {
        navigationManager.NavigateTo("/register/realtor");
    }

    private async Task HandleLogout()
    {
        await authService.Logout();
        navigationManager.NavigateTo("/");
    }
}